//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace testing.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/OMail.MailService.DataLayer.Models")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/OMail.MailService.DataLayer.Models")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMailService")]
    public interface IMailService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/RegisterUser", ReplyAction="http://tempuri.org/IMailService/RegisterUserResponse")]
        bool RegisterUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/RegisterUser", ReplyAction="http://tempuri.org/IMailService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/LoginUser", ReplyAction="http://tempuri.org/IMailService/LoginUserResponse")]
        bool LoginUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/LoginUser", ReplyAction="http://tempuri.org/IMailService/LoginUserResponse")]
        System.Threading.Tasks.Task<bool> LoginUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/GetSendedMessages", ReplyAction="http://tempuri.org/IMailService/GetSendedMessagesResponse")]
        testing.ServiceReference1.Message[] GetSendedMessages(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/GetSendedMessages", ReplyAction="http://tempuri.org/IMailService/GetSendedMessagesResponse")]
        System.Threading.Tasks.Task<testing.ServiceReference1.Message[]> GetSendedMessagesAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/GetReceivedMessages", ReplyAction="http://tempuri.org/IMailService/GetReceivedMessagesResponse")]
        testing.ServiceReference1.Message[] GetReceivedMessages(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/GetReceivedMessages", ReplyAction="http://tempuri.org/IMailService/GetReceivedMessagesResponse")]
        System.Threading.Tasks.Task<testing.ServiceReference1.Message[]> GetReceivedMessagesAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/SendMessage", ReplyAction="http://tempuri.org/IMailService/SendMessageResponse")]
        void SendMessage(testing.ServiceReference1.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/SendMessage", ReplyAction="http://tempuri.org/IMailService/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(testing.ServiceReference1.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/CheckIfUserExists", ReplyAction="http://tempuri.org/IMailService/CheckIfUserExistsResponse")]
        bool CheckIfUserExists(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/CheckIfUserExists", ReplyAction="http://tempuri.org/IMailService/CheckIfUserExistsResponse")]
        System.Threading.Tasks.Task<bool> CheckIfUserExistsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/GetUserByUsername", ReplyAction="http://tempuri.org/IMailService/GetUserByUsernameResponse")]
        testing.ServiceReference1.User GetUserByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/GetUserByUsername", ReplyAction="http://tempuri.org/IMailService/GetUserByUsernameResponse")]
        System.Threading.Tasks.Task<testing.ServiceReference1.User> GetUserByUsernameAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMailServiceChannel : testing.ServiceReference1.IMailService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MailServiceClient : System.ServiceModel.ClientBase<testing.ServiceReference1.IMailService>, testing.ServiceReference1.IMailService {
        
        public MailServiceClient() {
        }
        
        public MailServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MailServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MailServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MailServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterUser(string username, string password) {
            return base.Channel.RegisterUser(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string username, string password) {
            return base.Channel.RegisterUserAsync(username, password);
        }
        
        public bool LoginUser(string username, string password) {
            return base.Channel.LoginUser(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginUserAsync(string username, string password) {
            return base.Channel.LoginUserAsync(username, password);
        }
        
        public testing.ServiceReference1.Message[] GetSendedMessages(string username) {
            return base.Channel.GetSendedMessages(username);
        }
        
        public System.Threading.Tasks.Task<testing.ServiceReference1.Message[]> GetSendedMessagesAsync(string username) {
            return base.Channel.GetSendedMessagesAsync(username);
        }
        
        public testing.ServiceReference1.Message[] GetReceivedMessages(string username) {
            return base.Channel.GetReceivedMessages(username);
        }
        
        public System.Threading.Tasks.Task<testing.ServiceReference1.Message[]> GetReceivedMessagesAsync(string username) {
            return base.Channel.GetReceivedMessagesAsync(username);
        }
        
        public void SendMessage(testing.ServiceReference1.Message message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(testing.ServiceReference1.Message message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public bool CheckIfUserExists(string username) {
            return base.Channel.CheckIfUserExists(username);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIfUserExistsAsync(string username) {
            return base.Channel.CheckIfUserExistsAsync(username);
        }
        
        public testing.ServiceReference1.User GetUserByUsername(string username) {
            return base.Channel.GetUserByUsername(username);
        }
        
        public System.Threading.Tasks.Task<testing.ServiceReference1.User> GetUserByUsernameAsync(string username) {
            return base.Channel.GetUserByUsernameAsync(username);
        }
    }
}
